// src/server.js
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');
const cookieParser = require('cookie-parser');
const multer = require('multer');
const axios = require('axios');
const fs = require('fs');
const FormData = require('form-data');
const ScanResult = require('./models/scanResult'); // Import the model
const app = express();

const HYBRID_ANALYSIS_API_KEY = 'bs6r02qj4232d30an20h1mov1f052a82hjj6zpif2e43dd71vyzr2nge473a65ad';
const HYBRID_ANALYSIS_API_URL = 'https://www.hybrid-analysis.com/api/v2/quick-scan/file';

// Connect to MongoDB
mongoose.connect('mongodb://localhost/scannerDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Middleware
app.use(express.static(path.join(__dirname, '../public')));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

const upload = multer({ dest: 'uploads/' }); // Configure multer to save files to the 'uploads' directory

// Routes
app.use('/', require('./routes/scanRoutes')(upload)); // Pass the upload middleware to the routes
app.use('/', require('./routes/userRoutes'));
app.use('/', require('./routes/quarantineRoutes')); // Add quarantine routes
app.use('/', require('./routes/vpnRoutes')); // Add VPN routes

// Endpoint for file upload and analysis
app.post('/api/sandbox/upload', upload.single('file'), async (req, res) => {
  try {
    const file = req.file;
    if (!file) {
      console.error('No file uploaded');
      return res.status(400).json({ error: 'No file uploaded' });
    }

    console.log('File uploaded:', file);

    const fileStream = fs.createReadStream(file.path);

    const formData = new FormData();
    formData.append('file', fileStream);
    formData.append('scan_type', 'all');

    const response = await axios.post(HYBRID_ANALYSIS_API_URL, formData, {
      headers: {
        'User-Agent': 'Falcon Sandbox',
        'api-key': HYBRID_ANALYSIS_API_KEY,
        ...formData.getHeaders()
      }
    });

    console.log('Hybrid Analysis API response:', response.data);

    fs.unlinkSync(file.path); // Clean up the uploaded file

    res.json(response.data);
  } catch (error) {
    console.error('Error during file upload and analysis:', error.message);
    if (error.response) {
      console.error('Response data:', error.response.data);
      res.status(error.response.status).json({ error: error.response.data });
    } else {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
});

// Endpoint for storing results in the database
app.post('/api/database/store', async (req, res) => {
  try {
    const result = req.body;
    const scanResult = new ScanResult(result);
    await scanResult.save();
    res.status(200).json({ message: 'Result stored successfully' });
  } catch (error) {
    console.error('Error storing result in database:', error.message);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
