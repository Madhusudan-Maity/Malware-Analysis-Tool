// src/controller/vpnController.js
const { spawn, exec } = require('child_process');

let vpnProcess = null;

exports.startVPN = (req, res) => {
    if (vpnProcess) {
        return res.status(400).json({ error: 'VPN is already running' });
    }

    vpnProcess = spawn('openvpn', ['--config', 'C:\\Program Files\\OpenVPN\\config\\us-free-26.protonvpn.udp.ovpn']);

    vpnProcess.stdout.on('data', (data) => {
        console.log(`stdout: ${data}`);
    });

    vpnProcess.stderr.on('data', (data) => {
        console.error(`stderr: ${data}`);
    });

    vpnProcess.on('close', (code) => {
        console.log(`VPN process exited with code ${code}`);
        vpnProcess = null;
    });

    res.json({ message: 'VPN started' });
};

exports.stopVPN = (req, res) => {
    if (!vpnProcess) {
        return res.status(400).json({ error: 'VPN is not running' });
    }

    exec('taskkill /F /IM openvpn.exe', (error, stdout, stderr) => {
        if (error) {
            console.error(`Error stopping VPN: ${error.message}`);
            console.error(`stdout: ${stdout}`);
            console.error(`stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to stop VPN', details: stderr });
        }
        console.log(`VPN stopped successfully`);
        console.log(`stdout: ${stdout}`);
        console.log(`stderr: ${stderr}`);
        vpnProcess = null;
        res.json({ message: 'VPN stopped', stdout, stderr });
    });
};

exports.getVPNStatus = (req, res) => {
    exec('tasklist /FI "IMAGENAME eq openvpn.exe"', (error, stdout, stderr) => {
        if (error) {
            console.error(`Error checking VPN status: ${error.message}`);
            console.error(`stdout: ${stdout}`);
            console.error(`stderr: ${stderr}`);
            return res.status(500).json({ error: 'Failed to check VPN status', details: stderr });
        }
        const isConnected = stdout.includes('openvpn.exe');
        res.json({ isConnected });
    });
};