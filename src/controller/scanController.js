// src/controller/scanController.js
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const ScanResult = require('../models/scanResult');
const Quarantine = require('../models/quarantine');
const Scan = require('../models/scan'); // Adjust the path if needed
exports.scanFile = (req, res) => {
    if (!req.file) {
        return res.status(400).json({ message: 'No files uploaded' });
    }

    const filePath = req.file.path;

    exec(`clamscan -i ${filePath}`, async (error, stdout, stderr) => {
        const scanResult = new ScanResult({
            folderPath: filePath,
            stdout,
            stderr,
            error: error ? error.message : null
        });

        try {
            await scanResult.save();
            console.log('Scan result saved to database');

            // Check if the file is infected
            if (stdout.includes('Infected files: 1')) {
                const quarantinePath = path.join(__dirname, '../uploads/quarantine', path.basename(filePath));
                fs.renameSync(filePath, quarantinePath);

                const quarantine = new Quarantine({
                    fileName: path.basename(filePath),
                    filePath: quarantinePath,
                    scanResult: stdout,
                    timestamp: new Date()
                });

                await quarantine.save();
                console.log('File quarantined');
            }
        } catch (err) {
            console.error('Error saving scan result to database:', err);
        }

        if (error) {
            // Log the full error, stdout, and stderr
            console.error('clamscan error:', error);
            console.error('clamscan stdout:', stdout);
            console.error('clamscan stderr:', stderr);
            // Include both stdout and stderr in the response
            res.status(200).json({ message: 'Scan Result:', stdout, stderr, error: error.message });
            return;
        }

        res.status(200).json({ message: 'Scan Result:', stdout, stderr });
    });
};

exports.scanFolder = (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ message: 'No files uploaded' });
    }

    const folderPath = req.files.map(file => file.path).join(' ');

    exec(`clamscan -r ${folderPath}`, async (error, stdout, stderr) => {
        const scanResult = new ScanResult({
            folderPath,
            stdout,
            stderr,
            error: error ? error.message : null
        });

        try {
            await scanResult.save();
            console.log('Scan result saved to database');
        } catch (err) {
            console.error('Error saving scan result to database:', err);
        }

        if (error) {
            // Log the full error, stdout, and stderr
            console.error('clamscan error:', error);
            console.error('clamscan stdout:', stdout);
            console.error('clamscan stderr:', stderr);
            // Include both stdout and stderr in the response
            res.status(200).json({ message: 'Scan Result:', stdout, stderr, error: error.message });
            return;
        }

        res.status(200).json({ message: 'Scan Result:', stdout, stderr });
    });
};

exports.loadHistory = async (req, res) => {
    try {
        const history = await Scan.find().sort({ timestamp: -1 }).limit(5); // Adjust the limit value as necessary
        res.json(history);
    } catch (err) {
        console.error('Error fetching scan history:', err);
        res.status(500).json({ error: 'Error fetching scan history' });
    }
};
