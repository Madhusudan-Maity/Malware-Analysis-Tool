// Function to toggle section visibility
function showSection(sectionId) {
    const sections = document.querySelectorAll(".features");
    sections.forEach((section) => {
        section.style.display = "none";
    });
    document.getElementById(sectionId).style.display = "grid";
}

// Function to handle file upload and scanning
document.getElementById('uploadForm').addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);

    const response = await fetch('/scan-file', {
        method: 'POST',
        body: formData
    });

    const result = await response.json();
    const formattedResult = formatScanResult(result);
    document.getElementById('results').innerText = formattedResult;
});

function formatScanResult(result) {
    if (result.stdout) {
        return result.stdout.replace(/\r\n/g, '\n');
    }
    return JSON.stringify(result, null, 2);
}

// Function to handle folder upload and scanning
const uploadFolderForm = document.getElementById('uploadFolderForm');
if (uploadFolderForm) {
    uploadFolderForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData();
        const folderInput = document.getElementById('folderInput');
        for (const file of folderInput.files) {
            formData.append('files', file);
        }
        const response = await fetch('/upload-folder', {
            method: 'POST',
            body: formData
        });
        const result = await response.json();
        document.getElementById('results').innerHTML = `
            <h3>Scan Result:</h3>
            <pre>${result.stdout}</pre>
            <pre>${result.stderr}</pre>
            ${result.error ? `<pre>${result.error}</pre>` : ''}
        `;
    });
}

//VPN Functions

async function toggleVPN() {
    const statusResponse = await fetch('/vpn/status');
    const status = await statusResponse.json();

    if (status.isConnected) {
      await fetch('/vpn/stop', { method: 'POST' });
    } else {
      await fetch('/vpn/start', { method: 'POST' });
    }

    checkVPNStatus();
  }

  async function checkVPNStatus() {
    const statusResponse = await fetch('/vpn/status');
    const status = await statusResponse.json();
    document.getElementById('vpn-connection-status').innerText = status.isConnected ? 'Connected' : 'Disconnected';
}
  

// Function to load scan history
async function loadHistory() {
    const historyList = document.getElementById("history-list");
    historyList.innerHTML = ""; // Clear previous content

    try {
        const response = await fetch('/history');
        const scanHistory = await response.json();

        if (scanHistory.length === 0) {
            historyList.innerHTML = "<li>No scan history available.</li>";
        } else {
            scanHistory.forEach(entry => {
                const listItem = document.createElement("li");
                listItem.textContent = `${entry.folderPath} - ${entry.stdout || "No issues detected"}`;
                historyList.appendChild(listItem);
            });
        }
    } catch (error) {
        console.error('Error fetching scan history:', error);
        historyList.innerHTML = "<li>Error fetching scan history.</li>";
    }
}

// Modify the function to show history page when clicking "History"
document.querySelector('.feature-card li[onclick="showSection(\'history\')"]').addEventListener("click", function () {
    showSection("history");
    loadHistory();
});


// Handle Sandboxing file upload
document.getElementById('sandboxUploadForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    const formData = new FormData();
    formData.append('file', document.getElementById('sandboxFileInput').files[0]);

    const response = await fetch('/api/sandbox/upload', {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    document.getElementById('sandboxResults').innerText = JSON.stringify(result, null, 2);

    // Store result in database
    await fetch('/api/database/store', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(result)
    });
  });

  /*Password Manager */

const form = document.getElementById('password-form');
const passwordList = document.getElementById('password-list');

function loadPasswords() {
  const passwords = JSON.parse(localStorage.getItem('passwords')) || [];
  passwordList.innerHTML = '';
  passwords.forEach((entry, index) => {
    const div = document.createElement('div');
    div.className = 'password-item';
    div.innerHTML = `
      <div>
        <strong>Site:</strong> ${entry.site}<br>
        <strong>Username:</strong> ${entry.username}<br>
        <strong>Password:</strong> ${entry.password}
      </div>
      <button onclick="deletePassword(${index})">Delete</button>
    `;
    passwordList.appendChild(div);
  });
}

function addPassword(e) {
  e.preventDefault();
  const site = document.getElementById('site-name').value;
  const username = document.getElementById('username').value;
  const password = document.getElementById('password').value;

  const passwords = JSON.parse(localStorage.getItem('passwords')) || [];
  passwords.push({ site, username, password });
  localStorage.setItem('passwords', JSON.stringify(passwords));

  form.reset();
  loadPasswords();
}

function deletePassword(index) {
  const passwords = JSON.parse(localStorage.getItem('passwords')) || [];
  passwords.splice(index, 1);
  localStorage.setItem('passwords', JSON.stringify(passwords));
  loadPasswords();
}

form.addEventListener('submit', addPassword);
document.addEventListener('DOMContentLoaded', loadPasswords);